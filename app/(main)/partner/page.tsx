"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import NavigationBar from "@/components/navigation/navigationbar"
import { createPartner } from "@/api/auth"
import { 
  Building2,
  Users,
  Phone,
  Mail,
  MapPin,
  FileText,
  CheckCircle,
  Shield,
  TrendingUp,
  Clock,
  Star,
  Car,
  CreditCard,
  Award,
  Handshake
} from "lucide-react"

export default function PartnerPage() {
  const [formData, setFormData] = useState({
    email: "",
    phone: "",
    company: "",
    address: "",
    password: "",
    confirmPassword: "",
    city: "",
    businessLicense: "",
    vehicleCount: "",
    operatingYears: "",
    routes: "",
    website: "",
    description: ""
  })

  const [activeStep, setActiveStep] = useState(1)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState("")
  const [isSuccess, setIsSuccess] = useState(false)
  const provinces = [
  "An Giang", "B√† R·ªãa - V≈©ng T√†u", "B·∫°c Li√™u", "B·∫Øc Giang", "B·∫Øc K·∫°n",
  "B·∫Øc Ninh", "B·∫øn Tre", "B√¨nh D∆∞∆°ng", "B√¨nh ƒê·ªãnh", "B√¨nh Ph∆∞·ªõc",
  "B√¨nh Thu·∫≠n", "C√† Mau", "Cao B·∫±ng", "C·∫ßn Th∆°", "ƒê√† N·∫µng",
  "ƒê·∫Øk L·∫Øk", "ƒê·∫Øk N√¥ng", "ƒêi·ªán Bi√™n", "ƒê·ªìng Nai", "ƒê·ªìng Th√°p",
  "Gia Lai", "H√† Giang", "H√† Nam", "H√† N·ªôi", "H√† Tƒ©nh",
  "H·∫£i D∆∞∆°ng", "H·∫£i Ph√≤ng", "H·∫≠u Giang", "H√≤a B√¨nh", "H∆∞ng Y√™n",
  "Kh√°nh H√≤a", "Ki√™n Giang", "Kon Tum", "Lai Ch√¢u", "L·∫°ng S∆°n",
  "L√†o Cai", "L√¢m ƒê·ªìng", "Long An", "Nam ƒê·ªãnh", "Ngh·ªá An",
  "Ninh B√¨nh", "Ninh Thu·∫≠n", "Ph√∫ Th·ªç", "Ph√∫ Y√™n", "Qu·∫£ng B√¨nh",
  "Qu·∫£ng Nam", "Qu·∫£ng Ng√£i", "Qu·∫£ng Ninh", "Qu·∫£ng Tr·ªã", "S√≥c TrƒÉng",
  "S∆°n La", "T√¢y Ninh", "Th√°i B√¨nh", "Th√°i Nguy√™n", "Thanh H√≥a",
  "Th·ª´a Thi√™n Hu·∫ø", "Ti·ªÅn Giang", "TP. H·ªì Ch√≠ Minh", "Tr√† Vinh", "Tuy√™n Quang",
  "Vƒ©nh Long", "Vƒ©nh Ph√∫c", "Y√™n B√°i"
];
  const [selectedProvince, setSelectedProvince] = useState("")
  const benefits = [
    {
      icon: TrendingUp,
      title: "TƒÉng doanh thu",
      description: "Ti·∫øp c·∫≠n h√†ng tri·ªáu kh√°ch h√†ng ti·ªÅm nƒÉng tr√™n to√†n qu·ªëc"
    },
    {
      icon: Users,
      title: "Qu·∫£n l√Ω d·ªÖ d√†ng",
      description: "H·ªá th·ªëng qu·∫£n l√Ω ƒë∆°n gi·∫£n, hi·ªáu qu·∫£ v√† th√¢n thi·ªán"
    },
    {
      icon: Shield,
      title: "B·∫£o v·ªá quy·ªÅn l·ª£i",
      description: "Cam k·∫øt thanh to√°n ƒë√∫ng h·∫°n v√† h·ªó tr·ª£ 24/7"
    },
    {
      icon: Award,
      title: "Uy t√≠n th∆∞∆°ng hi·ªáu",
      description: "Tham gia v√†o h·ªá sinh th√°i v·∫≠n t·∫£i uy t√≠n h√†ng ƒë·∫ßu"
    }
  ]

  const partnerTestimonials = [
    {
      name: "Anh Nguy·ªÖn VƒÉn Minh",
      position: "Gi√°m ƒë·ªëc Nh√† xe Minh Ph√°t",
      content: "Sau 2 nƒÉm h·ª£p t√°c v·ªõi Vexere, doanh thu c·ªßa c√¥ng ty ch√∫ng t√¥i ƒë√£ tƒÉng 300%. Kh√°ch h√†ng d·ªÖ d√†ng t√¨m th·∫•y v√† ƒë·∫∑t v√©, c√≤n ch√∫ng t√¥i ch·ªâ c·∫ßn t·∫≠p trung v√†o ch·∫•t l∆∞·ª£ng d·ªãch v·ª•.",
      avatar: "/api/placeholder/60/60",
      rating: 5
    },
    {
      name: "Ch·ªã Tr·∫ßn Th·ªã Lan",
      position: "Ch·ªß t·ªãch Nh√† xe Ho√†ng Long",
      content: "H·ªá th·ªëng qu·∫£n l√Ω c·ªßa Vexere r·∫•t ti·ªán l·ª£i, gi√∫p ch√∫ng t√¥i theo d√µi ƒë∆∞·ª£c t√¨nh h√¨nh kinh doanh m·ªôt c√°ch chi ti·∫øt. ƒê·ªôi ng≈© h·ªó tr·ª£ lu√¥n nhi·ªát t√¨nh v√† chuy√™n nghi·ªáp.",
      avatar: "/api/placeholder/60/60",
      rating: 5
    }
  ]

  const steps = [
    { id: 1, title: "Th√¥ng tin c∆° b·∫£n", description: "Th√¥ng tin c√¥ng ty v√† li√™n h·ªá" },
    { id: 2, title: "Th√¥ng tin kinh doanh", description: "Chi ti·∫øt v·ªÅ ho·∫°t ƒë·ªông v·∫≠n t·∫£i" },
    { id: 3, title: "X√°c nh·∫≠n", description: "Xem l·∫°i v√† g·ª≠i ƒëƒÉng k√Ω" }
  ]

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
    // Clear error when user starts typing
    if (error) setError("")
  }

  const validateForm = () => {
    // Check required fields for step 1
    if (activeStep === 1) {
      if (!formData.company.trim()) {
        setError("Vui l√≤ng nh·∫≠p t√™n c√¥ng ty")
        return false
      }
      if (!formData.email.trim()) {
        setError("Vui l√≤ng nh·∫≠p email")
        return false
      }
      // Email validation
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
      if (!emailRegex.test(formData.email)) {
        setError("Vui l√≤ng nh·∫≠p email h·ª£p l·ªá")
        return false
      }
      if (!formData.phone.trim()) {
        setError("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i")
        return false
      }
      // Phone validation (basic Vietnamese phone number)
      const phoneRegex = /^[0-9]{10,11}$/
      if (!phoneRegex.test(formData.phone.replace(/\s/g, ''))) {
        setError("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá")
        return false
      }
      if (!formData.address.trim()) {
        setError("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ")
        return false
      }
      if (!formData.password.trim()) {
        setError("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u")
        return false
      }
      if (formData.password !== formData.confirmPassword) {
        setError("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp")
        return false
      }
      if (formData.password.length < 6) {
        setError("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")
        return false
      }
    }
    
    // Check required fields for step 2
    if (activeStep === 2) {
      if (!formData.businessLicense.trim()) {
        setError("Vui l√≤ng nh·∫≠p s·ªë gi·∫•y ph√©p kinh doanh")
        return false
      }
      if (!formData.vehicleCount.trim()) {
        setError("Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng xe")
        return false
      }
      // Check if vehicle count is a valid number
      if (isNaN(parseInt(formData.vehicleCount)) || parseInt(formData.vehicleCount) <= 0) {
        setError("S·ªë l∆∞·ª£ng xe ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng")
        return false
      }
      if (!formData.operatingYears.trim()) {
        setError("Vui l√≤ng nh·∫≠p s·ªë nƒÉm ho·∫°t ƒë·ªông")
        return false
      }
      // Check if operating years is a valid number
      if (isNaN(parseInt(formData.operatingYears)) || parseInt(formData.operatingYears) <= 0) {
        setError("S·ªë nƒÉm ho·∫°t ƒë·ªông ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng")
        return false
      }
      if (!formData.routes.trim()) {
        setError("Vui l√≤ng nh·∫≠p c√°c tuy·∫øn ƒë∆∞·ªùng ch√≠nh")
        return false
      }
    }
    
    return true
  }

  const handleSubmit = async () => {
    if (!validateForm()) return
    
    setIsLoading(true)
    setError("")
    
    try {
      // Combine address and city
      const fullAddress = formData.city 
        ? `${formData.address}, ${formData.city}` 
        : formData.address;

      await createPartner(
        formData.company,
        formData.email,
        formData.phone,
        fullAddress,
        formData.password,
        parseInt(formData.vehicleCount) || 0,
        formData.description,
        parseInt(formData.operatingYears) || 0,
        formData.businessLicense,
        formData.website,
        formData.routes
      )
      
      setIsSuccess(true)
      // Reset form after successful submission
      setTimeout(() => {
        setFormData({
          email: "",
          phone: "",
          company: "",
          address: "",
          password: "",
          confirmPassword: "",
          city: "",
          businessLicense: "",
          vehicleCount: "",
          operatingYears: "",
          routes: "",
          website: "",
          description: ""
        })
        setActiveStep(1)
        setIsSuccess(false)
      }, 3000)
      
    } catch (error) {
      console.error("Error submitting form:", error)
      setError("C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i.")
    } finally {
      setIsLoading(false)
    }
  }

  const handleNext = () => {
    if (validateForm()) {
      setActiveStep(activeStep + 1)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <NavigationBar currentPage="partner" />

      {/* Hero Section */}
      <section className="bg-gradient-to-r from-blue-600 to-blue-800 text-white">
        <div className="container mx-auto px-4 py-20">
          <div className="text-center max-w-4xl mx-auto">
            <h1 className="text-4xl md:text-5xl font-bold mb-6">
              Tr·ªü th√†nh ƒë·ªëi t√°c c·ªßa Vexere
            </h1>
            <p className="text-xl md:text-2xl text-blue-100 mb-8">
              K·∫øt n·ªëi v·ªõi h√†ng tri·ªáu kh√°ch h√†ng v√† ph√°t tri·ªÉn doanh nghi·ªáp v·∫≠n t·∫£i c·ªßa b·∫°n
            </p>
            <div className="bg-yellow-400 text-black px-6 py-3 rounded-lg inline-block">
              <span className="font-semibold">
                üéâ Mi·ªÖn ph√≠ ƒëƒÉng k√Ω - Hoa h·ªìng c·∫°nh tranh - H·ªó tr·ª£ 24/7
              </span>
            </div>
          </div>
        </div>
      </section>

      {/* Benefits Section */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12 text-gray-900">
            T·∫°i sao ch·ªçn Vexere l√†m ƒë·ªëi t√°c?
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {benefits.map(({ icon: Icon, title, description }, index) => (
              <div key={index} className="text-center group hover:shadow-lg transition-all duration-300 p-6 rounded-xl">
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:bg-blue-200 transition-colors">
                  <Icon className="w-8 h-8 text-blue-600" />
                </div>
                <h3 className="text-xl font-semibold mb-3 text-gray-900">{title}</h3>
                <p className="text-gray-600 text-sm leading-relaxed">{description}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Registration Form */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            <h2 className="text-3xl font-bold text-center mb-12 text-gray-900">
              ƒêƒÉng k√Ω tr·ªü th√†nh ƒë·ªëi t√°c
            </h2>

            {/* Progress Steps */}
            <div className="flex justify-center mb-12">
              <div className="flex items-center space-x-4">
                {steps.map((step, index) => (
                  <div key={step.id} className="flex items-center">
                    <div className={`flex items-center space-x-3 ${index !== steps.length - 1 ? 'mr-4' : ''}`}>
                      <div className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold ${
                        activeStep >= step.id 
                          ? 'bg-blue-600 text-white' 
                          : 'bg-gray-200 text-gray-600'
                      }`}>
                        {activeStep > step.id ? <CheckCircle className="w-6 h-6" /> : step.id}
                      </div>
                      <div className="hidden md:block">
                        <div className={`font-medium ${activeStep >= step.id ? 'text-blue-600' : 'text-gray-600'}`}>
                          {step.title}
                        </div>
                        <div className="text-sm text-gray-500">{step.description}</div>
                      </div>
                    </div>
                    {index !== steps.length - 1 && (
                      <div className={`w-12 h-1 ${activeStep > step.id ? 'bg-blue-600' : 'bg-gray-200'}`}></div>
                    )}
                  </div>
                ))}
              </div>
            </div>

            {/* Form */}
            <div className="bg-white rounded-xl p-8 shadow-lg">
              {/* Error Message */}
              {error && (
                <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                  <p className="text-red-600 text-sm">{error}</p>
                </div>
              )}

              {/* Success Message */}
              {isSuccess && (
                <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="w-5 h-5 text-green-600" />
                    <p className="text-green-600 font-medium">ƒêƒÉng k√Ω th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.</p>
                  </div>
                </div>
              )}
              {activeStep === 1 && (
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold mb-6 text-gray-900">Th√¥ng tin c∆° b·∫£n</h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">T√™n c√¥ng ty *</label>
                      <div className="relative">
                        <Input
                          placeholder="Nh·∫≠p t√™n c√¥ng ty"
                          value={formData.company}
                          onChange={(e) => handleInputChange('company', e.target.value)}
                          className="pl-10 h-12"
                        />
                        <Building2 className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">Email *</label>
                      <div className="relative">
                        <Input
                          type="email"
                          placeholder="email@company.com"
                          value={formData.email}
                          onChange={(e) => handleInputChange('email', e.target.value)}
                          className="pl-10 h-12"
                        />
                        <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">S·ªë ƒëi·ªán tho·∫°i *</label>
                      <div className="relative">
                        <Input
                          placeholder="0123456789"
                          value={formData.phone}
                          onChange={(e) => handleInputChange('phone', e.target.value)}
                          className="pl-10 h-12"
                        />
                        <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                      </div>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">ƒê·ªãa ch·ªâ c√¥ng ty *</label>
                    <div className="relative">
                      <Input
                        placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß"
                        value={formData.address}
                        onChange={(e) => handleInputChange('address', e.target.value)}
                        className="pl-10 h-12"
                      />
                      <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">M·∫≠t kh·∫©u *</label>
                      <div className="relative">
                        <Input
                          type="password"
                          placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                          value={formData.password}
                          onChange={(e) => handleInputChange('password', e.target.value)}
                          className="pl-10 h-12"
                        />
                        <CreditCard className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">X√°c nh·∫≠n m·∫≠t kh·∫©u *</label>
                      <div className="relative">
                        <Input
                          type="password"
                          placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                          value={formData.confirmPassword}
                          onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
                          className="pl-10 h-12"
                        />
                        <CreditCard className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                      </div>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">T·ªânh/Th√†nh ph·ªë</label>
                    <Select value={formData.city} onValueChange={(value) => handleInputChange('city', value)}>
                      <SelectTrigger className="h-12">
                        <SelectValue placeholder="Ch·ªçn t·ªânh/th√†nh ph·ªë" />
                      </SelectTrigger>
                      <SelectContent>
                        {provinces.map((province, index) => (
                          <SelectItem key={index} value={province}>
                            {province}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              )}

              {activeStep === 2 && (
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold mb-6 text-gray-900">Th√¥ng tin kinh doanh</h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">S·ªë gi·∫•y ph√©p kinh doanh *</label>
                      <div className="relative">
                        <Input
                          placeholder="Nh·∫≠p s·ªë gi·∫•y ph√©p"
                          value={formData.businessLicense}
                          onChange={(e) => handleInputChange('businessLicense', e.target.value)}
                          className="pl-10 h-12"
                        />
                        <FileText className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">S·ªë l∆∞·ª£ng xe *</label>
                      <div className="relative">
                        <Input
                          placeholder="S·ªë xe hi·ªán c√≥"
                          value={formData.vehicleCount}
                          onChange={(e) => handleInputChange('vehicleCount', e.target.value)}
                          className="pl-10 h-12"
                        />
                        <Car className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">S·ªë nƒÉm ho·∫°t ƒë·ªông *</label>
                      <div className="relative">
                        <Input
                          placeholder="NƒÉm kinh nghi·ªám"
                          value={formData.operatingYears}
                          onChange={(e) => handleInputChange('operatingYears', e.target.value)}
                          className="pl-10 h-12"
                        />
                        <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700">Website (n·∫øu c√≥)</label>
                      <Input
                        placeholder="https://yourwebsite.com"
                        value={formData.website}
                        onChange={(e) => handleInputChange('website', e.target.value)}
                        className="h-12"
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">C√°c tuy·∫øn ƒë∆∞·ªùng ch√≠nh *</label>
                    <textarea
                      className="w-full h-24 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                      placeholder="V√≠ d·ª•: S√†i G√≤n - ƒê√† L·∫°t, S√†i G√≤n - Nha Trang..."
                      value={formData.routes}
                      onChange={(e) => handleInputChange('routes', e.target.value)}
                    ></textarea>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">M√¥ t·∫£ th√™m v·ªÅ c√¥ng ty</label>
                    <textarea
                      className="w-full h-32 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                      placeholder="M√¥ t·∫£ v·ªÅ d·ªãch v·ª•, ch·∫•t l∆∞·ª£ng xe, ƒë·ªôi ng≈© nh√¢n vi√™n..."
                      value={formData.description}
                      onChange={(e) => handleInputChange('description', e.target.value)}
                    ></textarea>
                  </div>
                </div>
              )}

              {activeStep === 3 && (
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold mb-6 text-gray-900">X√°c nh·∫≠n th√¥ng tin</h3>
                  
                  <div className="bg-gray-50 rounded-lg p-6 space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <span className="font-medium text-gray-700">T√™n c√¥ng ty:</span>
                        <p className="text-gray-900">{formData.company}</p>
                      </div>
                      <div>
                        <span className="font-medium text-gray-700">Email:</span>
                        <p className="text-gray-900">{formData.email}</p>
                      </div>
                      <div>
                        <span className="font-medium text-gray-700">ƒêi·ªán tho·∫°i:</span>
                        <p className="text-gray-900">{formData.phone}</p>
                      </div>
                      <div className="md:col-span-2">
                        <span className="font-medium text-gray-700">ƒê·ªãa ch·ªâ:</span>
                        <p className="text-gray-900">
                          {formData.city 
                            ? `${formData.address}, ${formData.city}` 
                            : formData.address
                          }
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
                    <div className="flex items-start space-x-3">
                      <CheckCircle className="w-6 h-6 text-blue-600 flex-shrink-0 mt-0.5" />
                      <div>
                        <h4 className="font-semibold text-blue-900 mb-2">Cam k·∫øt ch·∫•t l∆∞·ª£ng</h4>
                        <p className="text-blue-800 text-sm">
                          B·∫±ng vi·ªác ƒëƒÉng k√Ω, b·∫°n cam k·∫øt tu√¢n th·ªß c√°c ti√™u chu·∫©n ch·∫•t l∆∞·ª£ng d·ªãch v·ª• c·ªßa Vexere 
                          v√† cung c·∫•p d·ªãch v·ª• v·∫≠n chuy·ªÉn an to√†n, ƒë√∫ng gi·ªù cho kh√°ch h√†ng.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Form Actions */}
              <div className="flex justify-between mt-8 pt-6 border-t border-gray-200">
                <Button 
                  variant="outline" 
                  onClick={() => setActiveStep(Math.max(1, activeStep - 1))}
                  disabled={activeStep === 1 || isLoading}
                  className="px-6"
                >
                  Quay l·∫°i
                </Button>
                
                {activeStep < 3 ? (
                  <Button 
                    onClick={handleNext}
                    disabled={isLoading}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-6"
                  >
                    Ti·∫øp t·ª•c
                  </Button>
                ) : (
                  <Button 
                    onClick={handleSubmit}
                    disabled={isLoading || isSuccess}
                    className="bg-yellow-500 hover:bg-yellow-600 text-black font-semibold px-8"
                  >
                    {isLoading ? (
                      <>
                        <div className="w-5 h-5 border-2 border-black border-t-transparent rounded-full animate-spin mr-2"></div>
                        ƒêang x·ª≠ l√Ω...
                      </>
                    ) : (
                      <>
                        <Handshake className="w-5 h-5 mr-2" />
                        G·ª≠i ƒëƒÉng k√Ω
                      </>
                    )}
                  </Button>
                )}
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Partner Testimonials */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12 text-gray-900">
            ƒê·ªëi t√°c n√≥i g√¨ v·ªÅ Vexere
          </h2>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-6xl mx-auto">
            {partnerTestimonials.map((testimonial, index) => (
              <div key={index} className="bg-gray-50 rounded-xl p-8 hover:shadow-lg transition-all duration-300">
                <div className="flex items-start space-x-4">
                  <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-green-600 rounded-full flex-shrink-0 flex items-center justify-center text-white font-bold text-lg">
                    {testimonial.name.split(' ').slice(-1)[0].charAt(0)}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center space-x-1 mb-3">
                      {[...Array(testimonial.rating)].map((_, i) => (
                        <Star key={i} className="w-5 h-5 fill-yellow-400 text-yellow-400" />
                      ))}
                    </div>
                    <h4 className="font-semibold text-lg text-gray-900 mb-1">{testimonial.name}</h4>
                    <p className="text-sm text-green-600 mb-4 font-medium">{testimonial.position}</p>
                    <p className="text-gray-700 text-sm leading-relaxed">{testimonial.content}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-gradient-to-r from-green-600 to-green-700 text-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-6">S·∫µn s√†ng b·∫Øt ƒë·∫ßu h√†nh tr√¨nh c√πng ch√∫ng t√¥i?</h2>
          <p className="text-xl text-green-100 mb-8 max-w-2xl mx-auto">
            H√£y li√™n h·ªá v·ªõi ƒë·ªôi ng≈© h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt v·ªÅ quy tr√¨nh h·ª£p t√°c
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
            <Button className="bg-white text-green-600 hover:bg-gray-100 font-semibold px-8 py-3">
              <Phone className="w-5 h-5 mr-2" />
              G·ªçi hotline: 1900 888 684
            </Button>
            <Button variant="outline" className="border-white text-white hover:bg-white hover:text-green-600 px-8 py-3">
              <Mail className="w-5 h-5 mr-2" />
              Email: partner@vexere.com
            </Button>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-16">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            <div className="lg:col-span-1">
              <div className="text-2xl font-bold text-blue-400 mb-6">Vexere</div>
              <p className="text-gray-400 text-sm mb-6 leading-relaxed">
                C√¥ng ty TNHH Th∆∞∆°ng M·∫°i D·ªãch V·ª• Vexere
              </p>
              <div className="flex space-x-4">
                <div className="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center hover:bg-blue-700 transition-colors cursor-pointer"></div>
                <div className="w-10 h-10 bg-red-600 rounded-lg flex items-center justify-center hover:bg-red-700 transition-colors cursor-pointer"></div>
                <div className="w-10 h-10 bg-gray-800 rounded-lg flex items-center justify-center hover:bg-gray-700 transition-colors cursor-pointer"></div>
              </div>
            </div>
            
            <div>
              <h4 className="font-semibold mb-6 text-lg">ƒê·ªëi t√°c</h4>
              <ul className="space-y-3 text-sm text-gray-400">
                <li><a href="#" className="hover:text-white transition-colors">H∆∞·ªõng d·∫´n ƒëƒÉng k√Ω</a></li>
                <li><a href="#" className="hover:text-white transition-colors">Ch√≠nh s√°ch hoa h·ªìng</a></li>
                <li><a href="#" className="hover:text-white transition-colors">Quy ƒë·ªãnh h·ª£p t√°c</a></li>
                <li><a href="#" className="hover:text-white transition-colors">H·ªó tr·ª£ ƒë·ªëi t√°c</a></li>
              </ul>
            </div>
            
            <div>
              <h4 className="font-semibold mb-6 text-lg">H·ªó tr·ª£</h4>
              <ul className="space-y-3 text-sm text-gray-400">
                <li><a href="#" className="hover:text-white transition-colors">H∆∞·ªõng d·∫´n thanh to√°n</a></li>
                <li><a href="#" className="hover:text-white transition-colors">Quy ch·∫ø Vexere.com</a></li>
                <li><a href="#" className="hover:text-white transition-colors">Ch√≠nh s√°ch b·∫£o m·∫≠t</a></li>
                <li><a href="#" className="hover:text-white transition-colors">C√¢u h·ªèi th∆∞·ªùng g·∫∑p</a></li>
              </ul>
            </div>
            
            <div>
              <h4 className="font-semibold mb-6 text-lg">Li√™n h·ªá</h4>
              <ul className="space-y-3 text-sm text-gray-400">
                <li className="flex items-center space-x-2">
                  <Phone className="w-4 h-4" />
                  <span>1900 888 684</span>
                </li>
                <li className="flex items-center space-x-2">
                  <Mail className="w-4 h-4" />
                  <span>partner@vexere.com</span>
                </li>
                <li className="flex items-center space-x-2">
                  <MapPin className="w-4 h-4" />
                  <span>TP. H·ªì Ch√≠ Minh</span>
                </li>
              </ul>
            </div>
          </div>
          
          <div className="border-t border-gray-800 mt-12 pt-8 text-center text-sm text-gray-400">
            <p>B·∫£n quy·ªÅn ¬© 2025 thu·ªôc v·ªÅ Vexere.com</p>
          </div>
        </div>
      </footer>
    </div>
  )
}
